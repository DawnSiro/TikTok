// Code generated by hertz generator.

package api

import (
	"bytes"
	"context"
	"io"
	"mime/multipart"

	api "douyin/cmd/api/biz/model/api"
	"douyin/cmd/api/biz/rpc"
	"douyin/kitex_gen/video"
	"douyin/pkg/errno"
	"douyin/pkg/global"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// GetFeed .
// @router /douyin/feed/ [GET]
func GetFeed(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.DouyinFeedRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusOK, &api.DouyinResponse{
			StatusCode: errno.UserRequestParameterError.ErrCode,
			StatusMsg:  err.Error(),
		})
		return
	}

	hlog.Infof("handler.feed_service.GetFeed Request: %#v", req)
	userID := c.GetUint64(global.Config.JWTConfig.IdentityKey)
	hlog.Info("handler.feed_service.GetFeed GetUserID:", userID)
	resp, err := rpc.GetFeed(context.Background(), &video.DouyinFeedRequest{
		LatestTime: req.LatestTime,
		Token:      req.Token,
	})
	if err != nil {
		errNo := errno.ConvertErr(err)
		c.JSON(consts.StatusOK, &api.DouyinFeedResponse{
			StatusCode: errNo.ErrCode,
			StatusMsg:  &errNo.ErrMsg,
		})
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// PublishAction .
// @router /douyin/publish/action/ [POST]
func PublishAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.DouyinPublishActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusOK, &api.DouyinResponse{
			StatusCode: errno.UserRequestParameterError.ErrCode,
			StatusMsg:  err.Error(),
		})
		return
	}

	hlog.Info("handler.publish_service.PublishAction Request:", req)
	fileHeader, err := c.FormFile("data")
	if err != nil {
		msg := err.Error()
		c.JSON(consts.StatusOK, &api.DouyinPublishActionResponse{
			StatusCode: errno.UserRequestParameterError.ErrCode,
			StatusMsg:  &msg,
		})
		return
	}

	hlog.Info("handler.publish_service.PublishAction Filename:", fileHeader.Filename)
	file, err := fileHeader.Open()
	defer func(file multipart.File) {
		err := file.Close()
		if err != nil {
			hlog.Error("handler.publish_service.PublishAction err:", err)
			errNo := errno.ConvertErr(err)
			c.JSON(consts.StatusOK, &api.DouyinPublishActionResponse{
				StatusCode: errNo.ErrCode,
				StatusMsg:  &errNo.ErrMsg,
			})
			return
		}
	}(file)
	// 将文件转化为字节流
	buf := bytes.NewBuffer(nil)
	if _, err := io.Copy(buf, file); err != nil {
		errNo := errno.ConvertErr(err)
		c.JSON(consts.StatusOK, &api.DouyinPublishActionResponse{
			StatusCode: errNo.ErrCode,
			StatusMsg:  &errNo.ErrMsg,
		})
		return
	}

	userID := c.GetUint64(global.Config.JWTConfig.IdentityKey)
	hlog.Info("handler.feed_service.GetFeed GetUserID:", userID)
	resp, err := rpc.PublishAction(context.Background(), &video.DouyinPublishActionRequest{
		Token: req.Token,
		Data:  buf.Bytes(),
		Title: req.Title,
	})
	if err != nil {
		errNo := errno.ConvertErr(err)
		c.JSON(consts.StatusOK, &api.DouyinPublishActionResponse{
			StatusCode: errNo.ErrCode,
			StatusMsg:  &errNo.ErrMsg,
		})
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetPublishVideos .
// @router /douyin/publish/list/ [GET]
func GetPublishVideos(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.DouyinPublishListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusOK, &api.DouyinResponse{
			StatusCode: errno.UserRequestParameterError.ErrCode,
			StatusMsg:  err.Error(),
		})
		return
	}

	hlog.Info("handler.publish_service.GetPublishVideos Request:", req)
	resp, err := rpc.GetPublishVideos(context.Background(), &video.DouyinPublishListRequest{
		UserId: req.UserID,
		Token:  req.Token,
	})
	if err != nil {
		errNo := errno.ConvertErr(err)
		c.JSON(consts.StatusOK, &api.DouyinPublishListResponse{
			StatusCode: errNo.ErrCode,
			StatusMsg:  &errNo.ErrMsg,
		})
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// FavoriteVideo .
// @router /douyin/favorite/action/ [POST]
func FavoriteVideo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.DouyinFavoriteActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusOK, &api.DouyinResponse{
			StatusCode: errno.UserRequestParameterError.ErrCode,
			StatusMsg:  err.Error(),
		})
		return
	}

	hlog.Info("handler.favorite_service.FavoriteVideo Request:", req)
	userID := c.GetUint64(global.Config.JWTConfig.IdentityKey)
	hlog.Info("handler.favorite_service.FavoriteVideo GetUserID:", userID)
	resp, err := rpc.FavoriteAction(context.Background(), &video.DouyinFavoriteActionRequest{
		Token:      req.Token,
		VideoId:    req.VideoID,
		ActionType: req.ActionType,
	})

	if err != nil {
		errNo := errno.ConvertErr(err)
		c.JSON(consts.StatusOK, &api.DouyinFavoriteActionResponse{
			StatusCode: errNo.ErrCode,
			StatusMsg:  &errNo.ErrMsg,
		})
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetFavoriteList .
// @router /douyin/favorite/list/ [GET]
func GetFavoriteList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.DouyinFavoriteListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusOK, &api.DouyinResponse{
			StatusCode: errno.UserRequestParameterError.ErrCode,
			StatusMsg:  err.Error(),
		})
		return
	}

	hlog.Info("handler.favorite_service.GetFavoriteList Request:", req)
	userID := c.GetUint64(global.Config.JWTConfig.IdentityKey)
	hlog.Info("handler.favorite_service.GetFavoriteList GetUserID:", userID)
	resp, err := rpc.GetFavoriteList(context.Background(), &video.DouyinFavoriteListRequest{
		UserId: req.UserID,
		Token:  req.Token,
	})
	if err != nil {
		errNo := errno.ConvertErr(err)
		c.JSON(consts.StatusOK, &api.DouyinFavoriteListResponse{
			StatusCode: errNo.ErrCode,
			StatusMsg:  &errNo.ErrMsg,
		})
		return
	}

	c.JSON(consts.StatusOK, resp)
}
