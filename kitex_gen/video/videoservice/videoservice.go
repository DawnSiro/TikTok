// Code generated by Kitex v0.7.1. DO NOT EDIT.

package videoservice

import (
	"context"
	video "douyin/kitex_gen/video"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return videoServiceServiceInfo
}

var videoServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "VideoService"
	handlerType := (*video.VideoService)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetFeed":          kitex.NewMethodInfo(getFeedHandler, newVideoServiceGetFeedArgs, newVideoServiceGetFeedResult, false),
		"PublishAction":    kitex.NewMethodInfo(publishActionHandler, newVideoServicePublishActionArgs, newVideoServicePublishActionResult, false),
		"GetPublishVideos": kitex.NewMethodInfo(getPublishVideosHandler, newVideoServiceGetPublishVideosArgs, newVideoServiceGetPublishVideosResult, false),
		"FavoriteVideo":    kitex.NewMethodInfo(favoriteVideoHandler, newVideoServiceFavoriteVideoArgs, newVideoServiceFavoriteVideoResult, false),
		"GetFavoriteList":  kitex.NewMethodInfo(getFavoriteListHandler, newVideoServiceGetFavoriteListArgs, newVideoServiceGetFavoriteListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "video",
		"ServiceFilePath": "idl\video.thrift",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.7.1",
		Extra:           extra,
	}
	return svcInfo
}

func getFeedHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceGetFeedArgs)
	realResult := result.(*video.VideoServiceGetFeedResult)
	success, err := handler.(video.VideoService).GetFeed(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceGetFeedArgs() interface{} {
	return video.NewVideoServiceGetFeedArgs()
}

func newVideoServiceGetFeedResult() interface{} {
	return video.NewVideoServiceGetFeedResult()
}

func publishActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServicePublishActionArgs)
	realResult := result.(*video.VideoServicePublishActionResult)
	success, err := handler.(video.VideoService).PublishAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServicePublishActionArgs() interface{} {
	return video.NewVideoServicePublishActionArgs()
}

func newVideoServicePublishActionResult() interface{} {
	return video.NewVideoServicePublishActionResult()
}

func getPublishVideosHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceGetPublishVideosArgs)
	realResult := result.(*video.VideoServiceGetPublishVideosResult)
	success, err := handler.(video.VideoService).GetPublishVideos(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceGetPublishVideosArgs() interface{} {
	return video.NewVideoServiceGetPublishVideosArgs()
}

func newVideoServiceGetPublishVideosResult() interface{} {
	return video.NewVideoServiceGetPublishVideosResult()
}

func favoriteVideoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceFavoriteVideoArgs)
	realResult := result.(*video.VideoServiceFavoriteVideoResult)
	success, err := handler.(video.VideoService).FavoriteVideo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceFavoriteVideoArgs() interface{} {
	return video.NewVideoServiceFavoriteVideoArgs()
}

func newVideoServiceFavoriteVideoResult() interface{} {
	return video.NewVideoServiceFavoriteVideoResult()
}

func getFavoriteListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceGetFavoriteListArgs)
	realResult := result.(*video.VideoServiceGetFavoriteListResult)
	success, err := handler.(video.VideoService).GetFavoriteList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceGetFavoriteListArgs() interface{} {
	return video.NewVideoServiceGetFavoriteListArgs()
}

func newVideoServiceGetFavoriteListResult() interface{} {
	return video.NewVideoServiceGetFavoriteListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetFeed(ctx context.Context, req *video.DouyinFeedRequest) (r *video.DouyinFeedResponse, err error) {
	var _args video.VideoServiceGetFeedArgs
	_args.Req = req
	var _result video.VideoServiceGetFeedResult
	if err = p.c.Call(ctx, "GetFeed", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PublishAction(ctx context.Context, req *video.DouyinPublishActionRequest) (r *video.DouyinPublishActionResponse, err error) {
	var _args video.VideoServicePublishActionArgs
	_args.Req = req
	var _result video.VideoServicePublishActionResult
	if err = p.c.Call(ctx, "PublishAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetPublishVideos(ctx context.Context, req *video.DouyinPublishListRequest) (r *video.DouyinPublishListResponse, err error) {
	var _args video.VideoServiceGetPublishVideosArgs
	_args.Req = req
	var _result video.VideoServiceGetPublishVideosResult
	if err = p.c.Call(ctx, "GetPublishVideos", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FavoriteVideo(ctx context.Context, req *video.DouyinFavoriteActionRequest) (r *video.DouyinFavoriteActionResponse, err error) {
	var _args video.VideoServiceFavoriteVideoArgs
	_args.Req = req
	var _result video.VideoServiceFavoriteVideoResult
	if err = p.c.Call(ctx, "FavoriteVideo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFavoriteList(ctx context.Context, req *video.DouyinFavoriteListRequest) (r *video.DouyinFavoriteListResponse, err error) {
	var _args video.VideoServiceGetFavoriteListArgs
	_args.Req = req
	var _result video.VideoServiceGetFavoriteListResult
	if err = p.c.Call(ctx, "GetFavoriteList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
